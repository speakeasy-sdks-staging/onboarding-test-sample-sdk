/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import { Authentication } from "./authentication";
import { Config } from "./config";
import { Drinks } from "./drinks";
import { Ingredients } from "./ingredients";
import * as shared from "./models/shared";
import { Orders } from "./orders";
import axios from "axios";
import { AxiosInstance } from "axios";

/**
 * Contains the list of servers available to the SDK
 */
export const ServerList = [
    /**
     * The production server.
     */
    "https://speakeasy.bar",
] as const;

/**
 * The available configuration options for the SDK
 */
export type SDKProps = {
    apiKey?: string;

    /**
     * Allows overriding the default axios client used by the SDK
     */
    defaultClient?: AxiosInstance;

    /**
     * Allows overriding the default server used by the SDK
     */
    serverIdx?: number;

    /**
     * Allows overriding the default server URL used by the SDK
     */
    serverURL?: string;
    /**
     * Allows overriding the default retry config used by the SDK
     */
    retryConfig?: utils.RetryConfig;
};

export class SDKConfiguration {
    defaultClient: AxiosInstance;
    security?: shared.Security | (() => Promise<shared.Security>);
    serverURL: string;
    serverDefaults: any;
    language = "typescript";
    openapiDocVersion = "1.0.0";
    sdkVersion = "0.1.0";
    genVersion = "2.151.2";
    userAgent = "speakeasy-sdk/typescript 0.1.0 2.151.2 1.0.0 The-Speakeasy-Bar";
    retryConfig?: utils.RetryConfig;
    public constructor(init?: Partial<SDKConfiguration>) {
        Object.assign(this, init);
    }
}

/**
 * The Speakeasy Bar: A bar that serves drinks.
 *
 * @remarks
 * A secret underground bar that serves drinks to those in the know.
 *
 * @see {@link https://docs.speakeasy.bar} - The Speakeasy Bar Documentation.
 */
export class TheSpeakeasyBar {
    /**
     * The authentication endpoints.
     */
    public authentication: Authentication;
    public config: Config;
    /**
     * The drinks endpoints.
     */
    public drinks: Drinks;
    /**
     * The ingredients endpoints.
     */
    public ingredients: Ingredients;
    /**
     * The orders endpoints.
     */
    public orders: Orders;

    private sdkConfiguration: SDKConfiguration;

    constructor(props?: SDKProps) {
        let serverURL = props?.serverURL;
        const serverIdx = props?.serverIdx ?? 0;

        if (!serverURL) {
            serverURL = ServerList[serverIdx];
        }

        const defaultClient = props?.defaultClient ?? axios.create({ baseURL: serverURL });
        this.sdkConfiguration = new SDKConfiguration({
            defaultClient: defaultClient,
            security: new shared.Security({ apiKey: props?.apiKey }),

            serverURL: serverURL,
            retryConfig: props?.retryConfig,
        });

        this.authentication = new Authentication(this.sdkConfiguration);
        this.config = new Config(this.sdkConfiguration);
        this.drinks = new Drinks(this.sdkConfiguration);
        this.ingredients = new Ingredients(this.sdkConfiguration);
        this.orders = new Orders(this.sdkConfiguration);
    }
}
